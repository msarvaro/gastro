package service

import (
	"context"
	"fmt"
	"log"
	"time"

	"restaurant-management/internal/domain/notification"
	"restaurant-management/internal/domain/user"
)

type NotificationService struct {
	repo         notification.Repository
	emailService notification.EmailService
	userService  user.Service
}

func NewNotificationService(repo notification.Repository, emailService notification.EmailService, userService user.Service) notification.Service {
	return &NotificationService{
		repo:         repo,
		emailService: emailService,
		userService:  userService,
	}
}

func (s *NotificationService) CreateNotification(ctx context.Context, businessID int, req notification.CreateNotificationRequest) (*notification.Notification, error) {
	// Validate recipients
	for _, email := range req.Recipients {
		if !s.emailService.ValidateEmail(email) {
			return nil, fmt.Errorf("invalid email address: %s", email)
		}
	}

	n := &notification.Notification{
		BusinessID: businessID,
		Type:       req.Type,
		Subject:    req.Subject,
		Body:       req.Body,
		Recipients: req.Recipients,
		Status:     notification.NotificationStatusPending,
	}

	err := s.repo.Create(ctx, n)
	if err != nil {
		return nil, err
	}

	return n, nil
}

func (s *NotificationService) SendNotification(ctx context.Context, n *notification.Notification) error {
	message := notification.EmailMessage{
		To:      n.Recipients,
		Subject: n.Subject,
		Body:    n.Body,
		IsHTML:  true,
	}

	err := s.emailService.SendEmail(message)
	sentAt := time.Now()

	if err != nil {
		errorMsg := err.Error()
		updateErr := s.repo.UpdateStatus(ctx, n.ID, notification.NotificationStatusFailed, nil, &errorMsg)
		if updateErr != nil {
			log.Printf("Failed to update notification status: %v", updateErr)
		}
		return err
	}

	err = s.repo.UpdateStatus(ctx, n.ID, notification.NotificationStatusSent, &sentAt, nil)
	if err != nil {
		log.Printf("Failed to update notification status to sent: %v", err)
	}

	return nil
}

func (s *NotificationService) ProcessPendingNotifications(ctx context.Context) error {
	notifications, err := s.repo.GetPendingNotifications(ctx, 50) // Process 50 at a time
	if err != nil {
		return err
	}

	for _, n := range notifications {
		if err := s.SendNotification(ctx, &n); err != nil {
			log.Printf("Failed to send notification %d: %v", n.ID, err)
		}
	}

	return nil
}

func (s *NotificationService) GetRecentNotifications(ctx context.Context, businessID int) ([]notification.Notification, error) {
	return s.repo.GetRecentNotifications(ctx, businessID, 10)
}

func (s *NotificationService) GetNotificationStats(ctx context.Context, businessID int) (*notification.NotificationStats, error) {
	return s.repo.GetStats(ctx, businessID)
}

// getManagerEmails gets all manager email addresses for a specific business
func (s *NotificationService) getManagerEmails(ctx context.Context, businessID int) ([]string, error) {
	users, err := s.userService.GetUsers(ctx, businessID)
	if err != nil {
		return nil, fmt.Errorf("failed to get users for business %d: %w", businessID, err)
	}

	var managerEmails []string
	for _, user := range users {
		if user.Role == "manager" && user.Email != "" {
			managerEmails = append(managerEmails, user.Email)
		}
	}

	if len(managerEmails) == 0 {
		return nil, fmt.Errorf("no managers found for business %d", businessID)
	}

	return managerEmails, nil
}

func (s *NotificationService) SendLowInventoryAlert(ctx context.Context, businessID int, itemName string, currentStock, minStock float64, unit string) error {
	subject := fmt.Sprintf("‚ö†Ô∏è –ù–∏–∑–∫–∏–π –∑–∞–ø–∞—Å: %s", itemName)
	body := s.generateLowInventoryHTML(itemName, currentStock, minStock, unit)

	// Get actual manager emails for this business
	recipients, err := s.getManagerEmails(ctx, businessID)
	if err != nil {
		return fmt.Errorf("failed to get manager emails: %w", err)
	}

	req := notification.CreateNotificationRequest{
		Type:       notification.NotificationTypeLowInventory,
		Subject:    subject,
		Body:       body,
		Recipients: recipients,
	}

	_, err = s.CreateNotification(ctx, businessID, req)
	return err
}

func (s *NotificationService) SendNewHiringAlert(ctx context.Context, businessID int, applicantName, position, experience, location string) error {
	subject := fmt.Sprintf("üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –Ω–∞–π–º: %s", position)
	body := s.generateNewHiringHTML(applicantName, position, experience, location)

	// Get actual manager emails for this business (they handle hiring)
	recipients, err := s.getManagerEmails(ctx, businessID)
	if err != nil {
		return fmt.Errorf("failed to get manager emails: %w", err)
	}

	req := notification.CreateNotificationRequest{
		Type:       notification.NotificationTypeNewHiring,
		Subject:    subject,
		Body:       body,
		Recipients: recipients,
	}

	_, err = s.CreateNotification(ctx, businessID, req)
	return err
}

func (s *NotificationService) SendWeeklyReport(ctx context.Context, businessID int, reportData interface{}) error {
	subject := "üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤"
	body := s.generateWeeklyReportHTML(reportData)

	// Get actual manager emails for this business
	recipients, err := s.getManagerEmails(ctx, businessID)
	if err != nil {
		return fmt.Errorf("failed to get manager emails: %w", err)
	}

	req := notification.CreateNotificationRequest{
		Type:       notification.NotificationTypeWeeklyReport,
		Subject:    subject,
		Body:       body,
		Recipients: recipients,
	}

	_, err = s.CreateNotification(ctx, businessID, req)
	return err
}

func (s *NotificationService) SendDailyReport(ctx context.Context, businessID int, reportData interface{}) error {
	subject := "üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤"
	body := s.generateDailyReportHTML(reportData)

	// Get actual manager emails for this business
	recipients, err := s.getManagerEmails(ctx, businessID)
	if err != nil {
		return fmt.Errorf("failed to get manager emails: %w", err)
	}

	req := notification.CreateNotificationRequest{
		Type:       notification.NotificationTypeDailyReport,
		Subject:    subject,
		Body:       body,
		Recipients: recipients,
	}

	_, err = s.CreateNotification(ctx, businessID, req)
	return err
}

// HTML template generators
func (s *NotificationService) generateLowInventoryHTML(itemName string, currentStock, minStock float64, unit string) string {
	return fmt.Sprintf(`
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>–ù–∏–∑–∫–∏–π –∑–∞–ø–∞—Å —Ç–æ–≤–∞—Ä–∞</title>
</head>
<body style="font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f4f4f4;">
    <div style="max-width: 600px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
        <h2 style="color: #d32f2f; margin-bottom: 20px;">‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –∑–∞–ø–∞—Å–µ</h2>
        <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
        <p>–£–≤–µ–¥–æ–º–ª—è–µ–º –≤–∞—Å –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø–∞—Å —Ç–æ–≤–∞—Ä–∞ <strong>%s</strong> –¥–æ—Å—Ç–∏–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è.</p>
        <div style="background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 4px; margin: 20px 0;">
            <p style="margin: 0;"><strong>–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫:</strong> %.2f %s</p>
            <p style="margin: 5px 0 0 0;"><strong>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å:</strong> %.2f %s</p>
        </div>
        <p>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.</p>
        <p style="color: #666; font-size: 14px; margin-top: 30px;">
            –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º.
        </p>
    </div>
</body>
</html>
`, itemName, currentStock, unit, minStock, unit)
}

func (s *NotificationService) generateNewHiringHTML(applicantName, position, experience, location string) string {
	return fmt.Sprintf(`
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –Ω–∞–π–º</title>
</head>
<body style="font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f4f4f4;">
    <div style="max-width: 600px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
        <h2 style="color: #1976d2; margin-bottom: 20px;">üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –Ω–∞–π–º</h2>
        <p>–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</p>
        <div style="background-color: #e3f2fd; border: 1px solid #bbdefb; padding: 15px; border-radius: 4px; margin: 20px 0;">
            <p style="margin: 0;"><strong>–ö–∞–Ω–¥–∏–¥–∞—Ç:</strong> %s</p>
            <p style="margin: 5px 0;"><strong>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</strong> %s</p>
            <p style="margin: 5px 0;"><strong>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</strong> %s</p>
            <p style="margin: 5px 0 0 0;"><strong>–õ–æ–∫–∞—Ü–∏—è:</strong> %s</p>
        </div>
        <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∑–∞—è–≤–∫–æ–π –≤ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.</p>
        <p style="color: #666; font-size: 14px; margin-top: 30px;">
            –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º.
        </p>
    </div>
</body>
</html>
`, applicantName, position, experience, location)
}

func (s *NotificationService) generateWeeklyReportHTML(reportData interface{}) string {
	return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç</title>
</head>
<body style="font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f4f4f4;">
    <div style="max-width: 600px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
        <h2 style="color: #388e3c; margin-bottom: 20px;">üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç</h2>
        <p>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤–∞—à–µ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É –≥–æ—Ç–æ–≤!</p>
        <div style="background-color: #e8f5e8; border: 1px solid #c8e6c9; padding: 15px; border-radius: 4px; margin: 20px 0;">
            <p style="margin: 0;"><strong>–ü–µ—Ä–∏–æ–¥:</strong> –ó–∞ –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é</p>
            <p style="margin: 5px 0 0 0;"><strong>–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:</strong> –≤—ã—Ä—É—á–∫–∞ +15%, –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å +8%</p>
        </div>
        <p>–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º.</p>
        <p style="color: #666; font-size: 14px; margin-top: 30px;">
            –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º.
        </p>
    </div>
</body>
</html>
`
}

func (s *NotificationService) generateDailyReportHTML(reportData interface{}) string {
	return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</title>
</head>
<body style="font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f4f4f4;">
    <div style="max-width: 600px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
        <h2 style="color: #1976d2; margin-bottom: 20px;">üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</h2>
        <p>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤–∞—à–µ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É –≥–æ—Ç–æ–≤!</p>
        <div style="background-color: #e3f2fd; border: 1px solid #bbdefb; padding: 15px; border-radius: 4px; margin: 20px 0;">
            <p style="margin: 0;"><strong>–î–∞—Ç–∞:</strong> –°–µ–≥–æ–¥–Ω—è</p>
            <p style="margin: 5px 0 0 0;"><strong>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</strong> –ì–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É</p>
        </div>
        <p>–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º.</p>
        <p style="color: #666; font-size: 14px; margin-top: 30px;">
            –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º.
        </p>
    </div>
</body>
</html>
`
}
