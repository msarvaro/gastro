document.addEventListener('DOMContentLoaded', function() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const token = localStorage.getItem('token');
    const role = localStorage.getItem('role');
    
    if (!token || role !== 'waiter') {
        window.location.href = '/';
        return;
    }

    loadTables();
    updateTablesStatus();
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–æ–ª–æ–≤
async function loadTables() {
    try {
        const tables = await waiterApi.getTables();
        const tableStatus = await waiterApi.getTableStatus();
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–æ–ª–æ–≤
        const tablesGrid = document.getElementById('tablesGrid');
        let tablesHTML = '';
        
        // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–∞
        for (const table of tables) {
            const status = tableStatus[table.id] || 'free';
            const tableClass = `table-card--${status}`;
            const statusText = getStatusText(status);
            
            tablesHTML += `
                <div class="table-card ${tableClass}" 
                     onclick="handleTableClick(${table.id})">
                    <div class="table-card__header">
                        <div class="table-card__number">–°—Ç–æ–ª ${table.number}</div>
                        <div class="table-card__status ${tableClass.replace('table-card--', 'status--')}">
                            ${statusText}
                        </div>
                    </div>
                    ${status === 'occupied' ? `
                        <div class="table-card__orders">
                            ${table.orders ? table.orders.map(order => `
                                <div class="table-order">
                                    <div class="table-order__header">
                                        <div class="table-order__id">#${order.id}</div>
                                        <div class="table-order__time">${waiterApi.formatOrderTime(order.createdAt)}</div>
                                    </div>
                                    <div class="table-order__items">${waiterApi.formatOrderItems(order.items)}</div>
                                    ${order.comment ? `
                                        <div class="table-order__comment">
                                            <div class="comment-icon">üí¨</div>
                                            <div class="comment-text">${order.comment}</div>
                                        </div>
                                    ` : ''}
                                    <div class="table-order__footer">
                                        <div class="table-order__total">${waiterApi.formatMoney(order.total)} KZT</div>
                                        <div class="table-order__status-badge ${getStatusBadgeClass(order.status)}">
                                            ${getStatusText(order.status)}
                                        </div>
                                    </div>
                                </div>
                            `).join('') : ''}
                        </div>
                    ` : ''}
                </div>
            `;
        }
        
        tablesGrid.innerHTML = tablesHTML;
        updateTablesStatus();
        
    } catch (error) {
        console.error('Error loading tables:', error);
        const tablesGrid = document.getElementById('tablesGrid');
        tablesGrid.innerHTML = '<div class="error-message">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</div>';
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Å—Ç–æ–ª—É
function handleTableClick(tableId) {
    window.location.href = `/waiter/create-order?table=${tableId}`;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getStatusBadgeClass(status) {
    const statusClasses = {
        'new': 'status-badge--new',
        'accepted': 'status-badge--accepted',
        'preparing': 'status-badge--preparing',
        'ready': 'status-badge--ready',
        'served': 'status-badge--served'
    };
    return statusClasses[status] || '';
}

function getStatusText(status) {
    const statusTexts = {
        'new': '–ù–æ–≤—ã–π',
        'accepted': '–ü—Ä–∏–Ω—è—Ç',
        'preparing': '–ì–æ—Ç–æ–≤–∏—Ç—Å—è',
        'ready': '–ì–æ—Ç–æ–≤',
        'served': '–ü–æ–¥–∞–Ω'
    };
    return statusTexts[status] || status;
}

function formatOrderItems(items) {
    if (!items || !items.length) return '';
    return items.map(item => `${item.name} x${item.quantity}`).join(', ');
}

function formatOrderTime(dateString) {
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
    });
}

function formatMoney(amount) {
    return amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(loadTables, 30000);

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–æ–ª—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', loadTables);

async function updateTablesStatus() {
    try {
        const tables = await waiterApi.getTables();
        const tableStatus = await waiterApi.getTableStatus();
        
        const freeTables = tables.filter(table => tableStatus[table.id] === 'free').length;
        const reservedTables = tables.filter(table => tableStatus[table.id] === 'reserved').length;
        const occupiedTables = tables.filter(table => tableStatus[table.id] === 'occupied').length;
        const totalTables = tables.length;
        
        const statusInfo = document.getElementById('tablesStatusInfo');
        statusInfo.textContent = `–°–≤–æ–±–æ–¥–Ω–æ ${freeTables} –∏–∑ ${totalTables} —Å—Ç–æ–ª–æ–≤ (${occupiedTables} –∑–∞–Ω—è—Ç–æ, ${reservedTables} –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ)`;
    } catch (error) {
        console.error('Error updating tables status:', error);
        const statusInfo = document.getElementById('tablesStatusInfo');
        statusInfo.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–æ–ª–æ–≤';
    }
}

function logout() {
    localStorage.removeItem('token');
    localStorage.removeItem('role');
    window.location.href = '/';
}